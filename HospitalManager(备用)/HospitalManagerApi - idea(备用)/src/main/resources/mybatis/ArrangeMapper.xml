<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rabbiter.hospital.mapper.ArrangeMapper">
    <!--定义封装account和user的resultMap-->
    <resultMap id="arrangeDoctorMap" type="com.rabbiter.hospital.pojo.Arrange">
        <id property="arId" column="ar_id" />
        <result property="arTime" column="ar_time" />
        <result property="dId" column="d_id" />
        <!--一对一的关系映射，配置封装user的内容 column中指名从表的外键 property="user"指的是单个实体类的引用-->
        <association property="doctor" javaType="com.rabbiter.hospital.pojo.Doctor">
            <result property="dId" column="d_id" />
            <result property="dName" column="d_name"/>
            <result property="dGender" column="d_gender"/>
            <result property="dPost" column="d_post"/>
            <result property="dIntroduction" column="d_introduction"/>
            <result property="dSection" column="d_section"/>
            <result property="dPrice" column="d_price"/>
            <result property="dAvgStar" column="d_avg_star"/>
        </association>
    </resultMap>

    <!--IAccountDao的查询所有-->
    <select id="findByTime" resultMap="arrangeDoctorMap">
        select * from doctor d,arrange a where d.d_id=a.d_id and a.ar_time=#{ar_time} and d.d_section=#{d_section}
    </select>
<!--传入多个参数-->
<!--    1. 不需要parameterType参数-->
<!--    2. mapper文件用注解@Param注解参数名-->
<!--    3. xml文件要使用2中的参数名-->

</mapper>

<!--        这是一个MyBatis Mapper XML 文件的示例，用于定义与数据库表之间的映射关系和查询操作。以下是XML文件的主要部分的解释：-->

<!--        <!DOCTYPE mapper ...>：指定了XML文档的DTD（文档类型定义），用于验证XML的结构和语法。-->

<!--<mapper> 元素：定义了这个Mapper XML 文件的根元素，并指定了命名空间（namespace），以及在后续的SQL语句中可以使用的命名空间前缀。-->

<!--<resultMap> 元素：定义了一个名为 arrangeDoctorMap 的结果映射，用于将数据库查询的结果映射到Java对象。
这个结果映射包括了 Arrange 对象以及与之相关联的 Doctor 对象。在这里，你为每个属性指定了数据库列名和Java对象属性名之间的映射关系。-->

<!--    <association> 元素：用于定义一对一的关系映射，将 Arrange 对象关联到 Doctor 对象。在这里，
你为 Doctor 对象的属性也指定了数据库列名和Java对象属性名之间的映射关系。-->

<!--  <select> 元素：定义了一个名为 findByTime 的查询语句，该语句将返回一个包含 Arrange 和关联的 Doctor 对象的结果集。
查询语句中包括了SQL语句，其中使用了参数占位符 #{ar_time} 和 #{d_section}，这些参数将在查询时使用。
resultMap 属性指定了在结果映射中使用的映射配置，即 arrangeDoctorMap。-->

<!--这个XML文件的作用是定义了与 Arrange 和 Doctor 对象的数据库映射关系以及一个查询操作，
可以根据 ar_time 和 d_section 来查询医生的排班信息，并将其映射到相应的Java对象中。在实际应用中，
你可以通过MyBatis框架使用这个Mapper来执行查询操作。-->
<!--        这段XML代码定义了一个结果映射（ResultMap），用于将数据库查询结果映射到Java对象。以下是对代码的详细解释：-->

<!--<mapper> 元素：指定了XML文件的根元素，并指定了命名空间（namespace），这个命名空间用于在后续的SQL语句中引用这个Mapper接口。-->

<!--<resultMap> 元素：定义了一个名为 arrangeDoctorMap 的结果映射，它的作用是将数据库查询结果映射到 com.rabbiter.hospital.pojo.Arrange 类型的Java对象上。该结果映射包含了以下映射配置：-->

<!--    <id> 元素：用于指定主键属性的映射关系，property 属性指定了Java对象的属性名 arId，column 属性指定了数据库表中的列名 ar_id。-->
<!--        <result> 元素：用于指定普通属性的映射关系，property 属性指定了Java对象的属性名，column 属性指定了数据库表中的列名。在这里，映射了 arTime 和 dId 属性。-->
<!--            <association> 元素：定义了一对一的关联映射关系，它的作用是将 Arrange 对象中的 dId 属性关联到另一个对象 com.rabbiter.hospital.pojo.Doctor 上。这个关联映射配置包含了以下映射关系：-->

<!--                property 属性：指定了在 Arrange 对象中用于关联的属性名，即 doctor。-->
<!--                javaType 属性：指定了关联的对象类型，即 com.rabbiter.hospital.pojo.Doctor。-->
<!--                在 <association> 元素内部，又定义了一组 <result> 元素，用于指定 Doctor 对象的各个属性与数据库表列之间的映射关系，包括 dId、dName、dGender 等属性。-->

<!--                    总之，这段XML代码定义了一个结果映射，使得在执行查询操作时，数据库查询结果能够按照指定的映射关系正确地映射到Java对象中，方便后续的数据操作和处理。这通常在MyBatis框架中用于配置数据查询的结果映射。-->





