<?xml version="1.0" encoding="UTF-8"?>

<!--        这个Maven项目的POM文件引入了许多依赖，下面是其中一些重要的依赖和它们的用途：-->

<!--        Spring Boot 相关依赖：-->

<!--        org.springframework.boot:spring-boot-starter: Spring Boot的核心依赖，用于构建Spring Boot应用程序。-->
<!--        org.springframework.boot:spring-boot-starter-web: 用于构建Web应用程序的Spring Boot依赖。-->
<!--        org.springframework.boot:spring-boot-starter-data-redis: 用于集成Redis缓存的Spring Boot依赖。-->
<!--        数据库连接相关依赖：-->

<!--        mysql:mysql-connector-java: MySQL数据库连接器，用于连接MySQL数据库。-->
<!--        MyBatis 和 MyBatis Plus 相关依赖：-->

<!--        org.mybatis.spring.boot:mybatis-spring-boot-starter: MyBatis的Spring Boot依赖，用于集成MyBatis框架。-->
<!--        com.baomidou:mybatis-plus-boot-starter: MyBatis Plus的Spring Boot依赖，用于简化MyBatis操作。-->
<!--        JWT（JSON Web Token）相关依赖：-->

<!--        com.auth0:java-jwt: 用于生成和解析JWT令牌的Java库。-->
<!--        Redis 相关依赖：-->

<!--        org.springframework.boot:spring-boot-starter-data-redis: Spring Boot集成Redis的依赖。-->
<!--        redis.clients:jedis: Java的Redis客户端库，用于与Redis服务器进行通信。-->
<!--        PDF 处理相关依赖：-->

<!--        com.itextpdf:itextpdf: iText PDF库，用于生成和操作PDF文档。-->
<!--        Excel 操作相关依赖：-->

<!--        cn.afterturn:easypoi-base: EasyPoi的基础库，用于操作Excel文件。-->
<!--        cn.afterturn:easypoi-web: EasyPoi的Web库，用于在Web应用中操作Excel文件。-->
<!--        cn.afterturn:easypoi-annotation: EasyPoi的注解库，用于定义Excel导出规则。-->
<!--        这些依赖用于构建一个包含Web功能、数据库连接、Redis缓存、JWT身份验证、PDF生成和Excel操作的Java应用程序。这些库可以大大简化各种功能的开发和集成，使开发人员能够更轻松地创建功能丰富的应用程序。项目的具体需求和功能将决定需要引入哪些依赖-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.rabbiter</groupId>
    <artifactId>HospitalManagerApi</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>HospitalManagerApi</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!--springboot父亲依赖-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.4.RELEASE</version>
        <relativePath/>
    </parent>
    <dependencies>
        <!--springboot启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <!--springboot web启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--数据库链接-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!--    mybatis依赖-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.2</version>
        </dependency>

        <!--    mybatis-plus依赖-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.1.1</version>
        </dependency>
        <!-- 引入jwt-->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.4.0</version>
        </dependency>



        <!-- redis Jedis依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>io.lettuce</groupId>
                    <artifactId>lettuce-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
        </dependency>
        <!--        pdf依赖-->
<!--        这是 iText PDF 库的主要依赖。iText 是一个开源的 Java 库，用于创建和操作 PDF 文件。
它提供了丰富的功能，包括创建 PDF 文档、添加文本、图像、表格、链接、数字签名等。这个依赖包含了 iText 5.5.11 版本的核心库-->
        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itextpdf</artifactId>
            <version>5.5.11</version>

        </dependency>

<!--        这是 iText Asian 字体扩展库的依赖。iText Asian 是 iText 的一个扩展，用于处理亚洲语言的字体和排版。
如果你的 PDF 文档中包含了亚洲语言的文本（如中文、日文、韩文等），那么可以引入这个依赖以确保正确的字体和排版-->
        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itext-asian</artifactId>
            <version>5.2.0</version>
        </dependency>
        <!--            引入easypoi操作Excel-->
        <dependency>
            <groupId>cn.afterturn</groupId>
            <artifactId>easypoi-base</artifactId>
            <version>3.2.0</version>
        </dependency>
        <dependency>
            <groupId>cn.afterturn</groupId>
            <artifactId>easypoi-web</artifactId>
            <version>3.2.0</version>
        </dependency>
        <dependency>
            <groupId>cn.afterturn</groupId>
            <artifactId>easypoi-annotation</artifactId>
            <version>3.2.0</version>
        </dependency>


    </dependencies>

<!--    这是 Maven 构建工具的配置段，用于定义项目的构建行为，主要包括了以下几个配置项：-->

<!--    <defaultGoal>compile</defaultGoal>：这个配置项指定了默认的构建目标（goal）。
在这里，将默认的构建目标设置为 compile，这意味着当执行 mvn compile 命令时，Maven 将会编译项目的源代码。
默认的构建目标是在没有明确指定构建目标的情况下执行 mvn 命令时使用的目标。-->

<!--    <resources>：这是一个资源配置的部分，用于告诉 Maven 在构建项目时如何处理资源文件。具体的配置如下：-->

<!--    <resource>：这是一个资源定义，包含了一组资源文件的配置。-->
<!--    <directory>src/main/java</directory>：指定了资源文件所在的目录路径。在这里，资源文件位于 src/main/java 目录下，这通常不是标准的资源文件位置，但可能是项目特定的配置。-->
<!--    <includes>：这是一个包含了资源文件的匹配规则的配置。在这里，只包含了 **/*.xml 这个规则，表示匹配所有扩展名为 .xml 的文件。-->
<!--    <resource>：这是另一个资源定义，用于处理更多的资源文件。-->
<!--    <directory>src/main/resources</directory>：指定了另一组资源文件所在的目录路径，通常这是标准的资源文件目录，包含项目的配置文件、静态资源等。-->
<!--    <includes>：包含了 */*.* 和 *.* 这两个规则，表示匹配所有文件。-->
<!--    总的来说，这段配置告诉 Maven 在构建项目时，需要处理位于 src/main/java 和 src/main/resources 目录下的所有资源文件，包括 .xml 文件和其他文件。
资源文件可能会在构建过程中被复制到输出目录，以便在运行时访问这些资源。这对于将配置文件、属性文件或其他静态资源打包到最终的构建产物中非常有用-->
    <build>
        <defaultGoal>compile</defaultGoal>
        <!--定义资源路径-->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>*/*.*</include>
                    <include>*.*</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>
    </build>

<!--    这段配置是 Maven 的仓库（Repository）配置，用于指定 Maven 构建工具在构建项目时从哪个远程仓库获取依赖项（dependencies）和插件（plugins）。具体的配置项含义如下：-->

<!--    <repositories>：这是一个仓库配置的容器，可以包含多个 <repository> 元素，每个 <repository> 元素对应一个远程仓库的配置。-->

<!--    <repository>：表示一个远程仓库的配置。-->

<!--    <id>：仓库的唯一标识符，通常用于在构建配置中引用这个仓库。-->
<!--    <name>：仓库的名称，是可选的，用于描述仓库的用途或内容。-->
<!--    <url>：远程仓库的地址，这里指定的是阿里云的 Maven 仓库地址。-->
<!--    <layout>：指定仓库布局，默认是 default，表示使用标准的 Maven 仓库布局。-->
<!--    <releases>：用于配置是否启用从该仓库获取正式版本（Release）的依赖项。在这里，<enabled>true</enabled> 表示启用，<updatePolicy>never</updatePolicy> 表示不检查更新。-->
<!--    <snapshots>：用于配置是否启用从该仓库获取快照版本（Snapshot）的依赖项。在这里，<enabled>true</enabled> 表示启用，<updatePolicy>never</updatePolicy> 表示不检查更新。-->
<!--    总的来说，这段配置告诉 Maven 在构建项目时可以从阿里云的 Maven 仓库获取依赖项和插件，包括正式版本和快照版本。这是一个常见的 Maven 仓库配置，
用于加速构建过程并确保项目能够访问所需的依赖项。如果项目需要从其他远程仓库获取依赖项，可以添加类似的 <repository> 配置来指定相应的仓库地址-->
    <repositories>
        <repository>
            <id>aliyun</id>
            <name>aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </repository>
    </repositories>
<!--    这段配置与前面提到的 <repositories> 类似，但是它是用于配置 Maven 插件（plugins）仓库的。具体的配置项含义如下：-->

<!--    <pluginRepositories>：这是一个插件仓库配置的容器，可以包含多个 <pluginRepository> 元素，每个 <pluginRepository> 元素对应一个远程插件仓库的配置。-->

<!--    <pluginRepository>：表示一个远程插件仓库的配置。-->

<!--    <id>：仓库的唯一标识符，通常用于在构建配置中引用这个仓库。-->
<!--    <name>：仓库的名称，是可选的，用于描述仓库的用途或内容。-->
<!--    <url>：远程仓库的地址，这里同样指定的是阿里云的 Maven 仓库地址。-->
<!--    <releases>：用于配置是否启用从该仓库获取正式版本（Release）的插件。在这里，<enabled>true</enabled> 表示启用。-->
<!--    <snapshots>：用于配置是否启用从该仓库获取快照版本（Snapshot）的插件。在这里，<enabled>false</enabled> 表示禁用。-->
<!--    这段配置告诉 Maven 在构建项目时可以从阿里云的 Maven 插件仓库获取插件。通常情况下，插件仓库与依赖项仓库不同，因为它们用于获取不同的资源。
插件仓库通常用于获取 Maven 构建工具需要执行构建任务的插件，例如编译、打包、测试等插件。同样，如果项目需要从其他远程仓库获取插件，
可以添加类似的 <pluginRepository> 配置来指定相应的仓库地址。-->

    <pluginRepositories>
        <pluginRepository>
            <id>aliyun</id>
            <name>aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>
